//
// Extra mixins voor retina
//
@mixin r-sprite-width($sprite) {
    width: nth($sprite, 5)/2;
}

@mixin r-sprite-height($sprite) {
    height: nth($sprite, 6)/2;
}

@mixin r-sprite-position($sprite) {
    $sprite-offset-x: nth($sprite, 3)/2;
    $sprite-offset-y: nth($sprite, 4)/2;
    background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin r-sprite-size($sprite) {
    background-size: nth($sprite, 7)/2 nth($sprite, 8)/2;
}

@mixin r-sprite($sprite, $sprite2x) {
    @include sprite($sprite);

    @media only screen and (-webkit-min-device-pixel-ratio: 1.5), screen and (min-device-pixel-ratio: 1.5) {
        @include sprite-image($sprite2x);
        @include r-sprite-position($sprite2x);
        @include r-sprite-width($sprite2x);
        @include r-sprite-height($sprite2x);
        @include r-sprite-size($sprite2x);
    }
}

//
// Foundation mixins
//

/// Makes an element visually hidden, but still accessible to keyboards and assistive devices.
/// @link http://snook.ca/archives/html_and_css/hiding-content-for-accessibility Hiding Content for Accessibility
@mixin element-invisible {
  position: absolute !important;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
}

/// Reverses the CSS output created by the `element-invisible()` mixin.
@mixin element-invisible-off {
  position: static !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}


// We use this to do clear floats
@mixin clearfix {
    *zoom:1;
    &:before, &:after { content: " "; display: table; }
    &:after { clear: both; }
}
